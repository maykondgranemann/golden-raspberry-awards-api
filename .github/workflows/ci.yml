name: CI Pipeline

on:
  push:
    branches:
      - develop
      - homolog
      - main
  pull_request:
    branches:
      - develop
      - homolog
      - main

jobs:
  python-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Rodar Testes (pytest)
        run: |
          poetry run pytest --maxfail=3 --disable-warnings

      - name: Checagem de Código (black, flake8, mypy)
        run: |
          poetry run black --check .
          poetry run flake8
          poetry run mypy app

  docker:
    runs-on: ubuntu-latest
    needs: python-tests

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Build da Imagem Docker
        run: |
          docker build -t zuplae/golden-raspberry-awards-api:latest -f infrastructure/Dockerfile .

      - name: Login no Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push da Imagem para o Docker Hub
        run: |
          docker push zuplae/golden-raspberry-awards-api:latest

  gcp-terraform:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: golden-raspberry-awards-api

      - name: Criar credencial do GCP manualmente
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-sa-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-sa-key.json
          gcloud auth list

      - name: Configurar gcloud CLI
        run: |
          gcloud config set project golden-raspberry-awards-api
          gcloud config set compute/zone us-central1-a
          gcloud container clusters get-credentials golden-cluster --region us-central1

      # Rodar Terraform
      - name: Instalar Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform
          terraform --version


      - name: Inicializar Terraform
        run: |
          cd infrastructure
          terraform init

      - name: Rodar Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve

      - name: Instalar Plugin de Autenticação GKE
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          gcloud components update --quiet
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Instalar e Configurar kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl
          
          # Baixar o binário oficial do kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Verificar se o kubectl foi instalado corretamente
          kubectl version --client

      - name: Deploy no Kubernetes (GKE)
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
        run: |
          kubectl apply -f infrastructure/deployment.yaml
          kubectl rollout status deployment golden-raspberry-awards
